import math

def simpson_rule(func, a, b, nseg):
    if nseg % 2 != 0:
        nseg += 1  
    dx = 1.0 * (b - a) / nseg
    total_sum = func(a) + func(b)
    for i in range(1, nseg, 2):
        total_sum += 4 * func(a + i * dx)
    for i in range(2, nseg - 1, 2):
        total_sum += 2 * func(a + i * dx)
    return total_sum * dx / 3

def func(x):
    # Подынтегральная функция (1/((pow(x,2))-4*x+3)).
    return 1 / ((math.pow(x, 2)) - 4 * x + 3)

def main():
    print("Используем метод Симпсона")
    print("Интегрируемая функция: f(x) = 1/((pow(x,2))-4*x+3)")
    
    a = 0       # Левый край отрезка интегрирования
    b = 2       # Правый край отрезка интегрирования
    nseg = 2    # Начальное количество сегментов
    eps = 1e-7  # Точность

    print(" a = {}, b = {}, eps = {}".format(a, b, eps))
    
    int_1 = simpson_rule(func, a, b, nseg)
    nseg *= 2
    int_2 = simpson_rule(func, a, b, nseg)
    
    while abs(int_1 - int_2) > eps:
        nseg *= 2
        int_1 = simpson_rule(func, a, b, nseg)
        int_2 = simpson_rule(func, a, b, nseg)
        
        if nseg > 100000:
            print("Warning: Max iterations/segments reached. Result might not be accurate.")
            break
    
    print("Ответ: I = {}, Количество разбиений = {}".format(int_2, nseg))

if __name__ == "__main__":
    main()
