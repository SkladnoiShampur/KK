import numpy as np

def simpson_rule(func, a, b, nseg):
    if nseg % 2 != 0:
        nseg += 1  

    dx = (b - a) / nseg
    total_sum = func(a) + func(b)

    for i in range(1, nseg, 2):
        total_sum += 4 * func(a + i * dx)

    for i in range(2, nseg - 1, 2):
        total_sum += 2 * func(a + i * dx)

    return total_sum * dx / 3

def func(x):
    return (x * x) * np.exp(-x)

if __name__ == "__main__":
    print("Используем метод Симпсона")
    print("Интегрируемая функция: f(x) = 1/(x*x)*sin(1/x)")

    a = 0       # Левый край отрезка интегрирования
    b = 10      # Правый край отрезка интегрирования
    nseg = 2    # Начальное количество сегментов
    eps = 1e-7  # Точность

    print(f" a = {a}, b = {b}, eps = {eps}")

    int_1 = simpson_rule(func, a, b, nseg)
    nseg *= 2
    int_2 = simpson_rule(func, a, b, nseg)

    while abs(int_1 - int_2) > eps:
        nseg *= 2
        int_1 = simpson_rule(func, a, b, nseg)
        int_2 = simpson_rule(func, a, b, nseg)

        if nseg > 100000:
            print("Warning: Max iterations/segments reached. Result might not be accurate.")
            break

    print(f"Ответ: I = {int_2}, Количество разбиений = {nseg}")
