#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

// Класс Пицца
class Pizza {
public:
    string name;
    string size;
    double price;
    string ingredients;
};

// Класс Закуски
class Snack {
public:
    string name;
    double price;
    int weight;
};

// Класс Напитки
class Drink {
public:
    string name;
    double price;
    string volume;
    bool isAlcoholic;
};

// Глобальные векторы для хранения данных
vector<Pizza> pizzas;
vector<Snack> snacks;
vector<Drink> drinks;

// Функция сохранения данных в файл
void saveToFile(const string& filename) {
    ofstream file(filename);
    
    // Сохраняем пиццы
    for (const auto& p : pizzas) {
        file << "Pizza " << p.name << " " << p.size << " " << p.price << " " << p.ingredients << endl;
    }
    
    // Сохраняем закуски
    for (const auto& s : snacks) {
        file << "Snack " << s.name << " " << s.price << " " << s.weight << endl;
    }
    
    // Сохраняем напитки
    for (const auto& d : drinks) {
        file << "Drink " << d.name << " " << d.price << " " << d.volume << " " << d.isAlcoholic << endl;
    }
    
    file.close();
    cout << "Данные сохранены в файл: " << filename << endl;
}

// Функция загрузки данных из файла
void loadFromFile(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Ошибка открытия файла!" << endl;
        return;
    }
    
    pizzas.clear();
    snacks.clear();
    drinks.clear();
    
    string line;
    while (getline(file, line)) {
        istringstream iss(line);
        string type;
        iss >> type;
        
        if (type == "Pizza") {
            Pizza p;
            iss >> p.name >> p.size >> p.price;
            getline(iss, p.ingredients); // Читаем оставшуюся часть строки как ингредиенты
            pizzas.push_back(p);
        } else if (type == "Snack") {
            Snack s;
            iss >> s.name >> s.price >> s.weight;
            snacks.push_back(s);
        } else if (type == "Drink") {
            Drink d;
            string alcoholic;
            iss >> d.name >> d.price >> d.volume >> alcoholic;
            d.isAlcoholic = (alcoholic == "1");
            drinks.push_back(d);
        }
    }
    
    file.close();
    cout << "Данные загружены из файла: " << filename << endl;
}

// Функция добавления пиццы
void addPizza() {
    Pizza p;
    cout << "Введите название пиццы: ";
    cin.ignore();
    getline(cin, p.name);
    cout << "Введите размер (S/M/L): ";
    cin >> p.size;
    cout << "Введите цену: ";
    cin >> p.price;
    cout << "Введите ингредиенты (через запятую): ";
    cin.ignore();
    getline(cin, p.ingredients);
    pizzas.push_back(p);
    cout << "Пицца добавлена в меню!" << endl;
}

// Функция добавления закуски
void addSnack() {
    Snack s;
    cout << "Введите название закуски: ";
    cin.ignore();
    getline(cin, s.name);
    cout << "Введите цену: ";
    cin >> s.price;
    cout << "Введите вес (в граммах): ";
    cin >> s.weight;
    snacks.push_back(s);
    cout << "Закуска добавлена в меню!" << endl;
}

// Функция добавления напитка
void addDrink() {
    Drink d;
    cout << "Введите название напитка: ";
    cin.ignore();
    getline(cin, d.name);
    cout << "Введите цену: ";
    cin >> d.price;
    cout << "Введите объем (250ml/500ml/1L): ";
    cin >> d.volume;
    cout << "Алкогольный? (1 - да, 0 - нет): ";
    cin >> d.isAlcoholic;
    drinks.push_back(d);
    cout << "Напиток добавлен в меню!" << endl;
}

// Функция вывода всего меню
void printMenu() {
    cout << "\n=== Меню пиццерии ===" << endl;
    
    cout << "\n--- Пиццы ---" << endl;
    for (size_t i = 0; i < pizzas.size(); ++i) {
        cout << i+1 << ". " << pizzas[i].name << " (" << pizzas[i].size << ") - " << pizzas[i].price << " руб.\n";
        cout << "   Ингредиенты: " << pizzas[i].ingredients << endl;
    }
    
    cout << "\n--- Закуски ---" << endl;
    for (size_t i = 0; i < snacks.size(); ++i) {
        cout << i+1 << ". " << snacks[i].name << " - " << snacks[i].price << " руб. (" << snacks[i].weight << "г)\n";
    }
    
    cout << "\n--- Напитки ---" << endl;
    for (size_t i = 0; i < drinks.size(); ++i) {
        cout << i+1 << ". " << drinks[i].name << " (" << drinks[i].volume << ") - " << drinks[i].price << " руб. ";
        cout << (drinks[i].isAlcoholic ? "[Алкогольный]" : "[Безалкогольный]") << endl;
    }
}

// Функция обновления записи
void updateItem() {
    cout << "Выберите категорию для обновления (1 - пиццы, 2 - закуски, 3 - напитки): ";
    int category;
    cin >> category;
    
    printMenu();
    cout << "Введите номер позиции для обновления: ";
    int index;
    cin >> index;
    index--; // Преобразуем в 0-based индекс
    
    if (category == 1) {
        if (index < 0 || index >= (int)pizzas.size()) {
            cout << "Неверный номер позиции!" << endl;
            return;
        }
        cout << "Введите новое название пиццы: ";
        cin.ignore();
        getline(cin, pizzas[index].name);
        cout << "Введите новый размер (S/M/L): ";
        cin >> pizzas[index].size;
        cout << "Введите новую цену: ";
        cin >> pizzas[index].price;
        cout << "Введите новые ингредиенты (через запятую): ";
        cin.ignore();
        getline(cin, pizzas[index].ingredients);
    } else if (category == 2) {
        if (index < 0 || index >= (int)snacks.size()) {
            cout << "Неверный номер позиции!" << endl;
            return;
        }
        cout << "Введите новое название закуски: ";
        cin.ignore();
        getline(cin, snacks[index].name);
        cout << "Введите новую цену: ";
        cin >> snacks[index].price;
        cout << "Введите новый вес (в граммах): ";
        cin >> snacks[index].weight;
    } else if (category == 3) {
        if (index < 0 || index >= (int)drinks.size()) {
            cout << "Неверный номер позиции!" << endl;
            return;
        }
        cout << "Введите новое название напитка: ";
        cin.ignore();
        getline(cin, drinks[index].name);
        cout << "Введите новую цену: ";
        cin >> drinks[index].price;
        cout << "Введите новый объем (250ml/500ml/1L): ";
        cin >> drinks[index].volume;
        cout << "Алкогольный? (1 - да, 0 - нет): ";
        cin >> drinks[index].isAlcoholic;
    }
    
    cout << "Позиция обновлена!" << endl;
}

// Функция удаления записи
void deleteItem() {
    cout << "Выберите категорию для удаления (1 - пиццы, 2 - закуски, 3 - напитки): ";
    int category;
    cin >> category;
    
    printMenu();
    cout << "Введите номер позиции для удаления: ";
    int index;
    cin >> index;
    index--; // Преобразуем в 0-based индекс
    
    if (category == 1) {
        if (index < 0 || index >= (int)pizzas.size()) {
            cout << "Неверный номер позиции!" << endl;
            return;
        }
        pizzas.erase(pizzas.begin() + index);
    } else if (category == 2) {
        if (index < 0 || index >= (int)snacks.size()) {
            cout << "Неверный номер позиции!" << endl;
            return;
        }
        snacks.erase(snacks.begin() + index);
    } else if (category == 3) {
        if (index < 0 || index >= (int)drinks.size()) {
            cout << "Неверный номер позиции!" << endl;
            return;
        }
        drinks.erase(drinks.begin() + index);
    }
    
    cout << "Позиция удалена из меню!" << endl;
}

// Главное меню программы
int main() {
    setlocale(LC_ALL, "Russian");
    
    int choice;
    string filename = "pizzeria_menu.txt";
    
    do {
        cout << "\n=== Управление меню пиццерии ===" << endl;
        cout << "1. Добавить пиццу" << endl;
        cout << "2. Добавить закуску" << endl;
        cout << "3. Добавить напиток" << endl;
        cout << "4. Просмотреть меню" << endl;
        cout << "5. Обновить позицию" << endl;
        cout << "6. Удалить позицию" << endl;
        cout << "7. Сохранить меню в файл" << endl;
        cout << "8. Загрузить меню из файла" << endl;
        cout << "0. Выход" << endl;
        cout << "Выберите действие: ";
        cin >> choice;
        
        switch (choice) {
            case 1: addPizza(); break;
            case 2: addSnack(); break;
            case 3: addDrink(); break;
            case 4: printMenu(); break;
            case 5: updateItem(); break;
            case 6: deleteItem(); break;
            case 7: saveToFile(filename); break;
            case 8: loadFromFile(filename); break;
            case 0: cout << "Выход из программы..." << endl; break;
            default: cout << "Неверный выбор!" << endl;
        }
    } while (choice != 0);
    
    return 0;
}
